/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ICwdFund {
  export type CrowdFundStruct = {
    title: string;
    fundingGoal: BigNumberish;
    owner: AddressLike;
    durationTime: BigNumberish;
    isActive: boolean;
    fundingBalance: BigNumberish;
    contributors: AddressLike[];
  };

  export type CrowdFundStructOutput = [
    title: string,
    fundingGoal: bigint,
    owner: string,
    durationTime: bigint,
    isActive: boolean,
    fundingBalance: bigint,
    contributors: string[]
  ] & {
    title: string;
    fundingGoal: bigint;
    owner: string;
    durationTime: bigint;
    isActive: boolean;
    fundingBalance: bigint;
    contributors: string[];
  };
}

export interface ICwdFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaignEnds"
      | "contribute"
      | "contributeEth"
      | "crowd"
      | "id"
      | "markSuccessful"
      | "proposeCampaign"
      | "refundContributors"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaignEnds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "crowd", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "markSuccessful",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeCampaign",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundContributors",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributeEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crowd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundContributors",
    data: BytesLike
  ): Result;
}

export interface ICwdFund extends BaseContract {
  connect(runner?: ContractRunner | null): ICwdFund;
  waitForDeployment(): Promise<this>;

  interface: ICwdFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignEnds: TypedContractMethod<[_ID: BigNumberish], [void], "nonpayable">;

  contribute: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  contributeEth: TypedContractMethod<[_ID: BigNumberish], [void], "payable">;

  crowd: TypedContractMethod<
    [arg0: BigNumberish],
    [ICwdFund.CrowdFundStructOutput],
    "view"
  >;

  id: TypedContractMethod<[], [bigint], "view">;

  markSuccessful: TypedContractMethod<
    [_ID: BigNumberish],
    [void],
    "nonpayable"
  >;

  proposeCampaign: TypedContractMethod<
    [_title: string, _fundingGoal: BigNumberish, _durationTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  refundContributors: TypedContractMethod<
    [_ID: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignEnds"
  ): TypedContractMethod<[_ID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributeEth"
  ): TypedContractMethod<[_ID: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "crowd"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [ICwdFund.CrowdFundStructOutput],
    "view"
  >;
  getFunction(nameOrSignature: "id"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "markSuccessful"
  ): TypedContractMethod<[_ID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposeCampaign"
  ): TypedContractMethod<
    [_title: string, _fundingGoal: BigNumberish, _durationTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refundContributors"
  ): TypedContractMethod<[_ID: BigNumberish], [void], "nonpayable">;

  filters: {};
}
